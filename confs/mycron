# Edit this file to introduce tasks to be run by cron.
# 
# Each task to run has to be defined through a single line
# indicating with different fields when the task will be run
# and what command to run for the task
# 
# To define the time you can provide concrete values for
# minute (m), hour (h), day of month (dom), month (mon),
# and day of week (dow) or use '*' in these fields (for 'any').# 
# Notice that tasks will be started based on the cron's system
# daemon's notion of time and timezones.
# 
# Output of the crontab jobs (including errors) is sent through
# email to the user the crontab file belongs to (unless redirected).
# 
# For example, you can run a backup of all your user accounts
# at 5 a.m every week with:
# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/
# 
# For more information see the manual pages of crontab(5) and cron(8)
# 
# m h  dom mon dow   command

01 *  * * * /home/docker/code/scripts/system-heartbeat.sh  > /tmp/cron-system-heartbeat.log

05 *  * * * /home/docker/code/scripts/analytics.sh  > /tmp/cron-analytics.log

10 *  * * * /home/docker/code/scripts/backup.sh  > /tmp/cron-bkp.log

15 *  * * * /usr/sbin/logrotate /etc/logrotate.d/nginx  > /tmp/cron-logrotate.log

20 *  * * * /usr/bin/python /home/docker/code/qbank-gstudio-scripts/single_school_get_MIT_activity_data/single_school_get_MIT_activity_data.py  > /tmp/cron-single_school_get_MIT_activity_data.log

#10 *  8-14,22-31 * * [ `date +\%a` = "Fri" ] && echo "execfile('/home/docker/code/gstudio/doc/deployer/get_all_users_activity_timestamp_csvs.py')" | /usr/bin/python /home/docker/code/gstudio/gnowsys-ndf/manage.py shell  > /tmp/cron-get_all_users_activity_timestamp_csvs.py.log
